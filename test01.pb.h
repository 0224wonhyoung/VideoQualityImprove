// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test01.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test01_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test01_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test01_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test01_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test01_2eproto;
class SomeMessage;
struct SomeMessageDefaultTypeInternal;
extern SomeMessageDefaultTypeInternal _SomeMessage_default_instance_;
class SomeMessage_Box;
struct SomeMessage_BoxDefaultTypeInternal;
extern SomeMessage_BoxDefaultTypeInternal _SomeMessage_Box_default_instance_;
class SomeMessage_Mat;
struct SomeMessage_MatDefaultTypeInternal;
extern SomeMessage_MatDefaultTypeInternal _SomeMessage_Mat_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SomeMessage* Arena::CreateMaybeMessage<::SomeMessage>(Arena*);
template<> ::SomeMessage_Box* Arena::CreateMaybeMessage<::SomeMessage_Box>(Arena*);
template<> ::SomeMessage_Mat* Arena::CreateMaybeMessage<::SomeMessage_Mat>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SomeMessage_Mat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage.Mat) */ {
 public:
  inline SomeMessage_Mat() : SomeMessage_Mat(nullptr) {}
  ~SomeMessage_Mat() override;
  explicit PROTOBUF_CONSTEXPR SomeMessage_Mat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SomeMessage_Mat(const SomeMessage_Mat& from);
  SomeMessage_Mat(SomeMessage_Mat&& from) noexcept
    : SomeMessage_Mat() {
    *this = ::std::move(from);
  }

  inline SomeMessage_Mat& operator=(const SomeMessage_Mat& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage_Mat& operator=(SomeMessage_Mat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SomeMessage_Mat& default_instance() {
    return *internal_default_instance();
  }
  static inline const SomeMessage_Mat* internal_default_instance() {
    return reinterpret_cast<const SomeMessage_Mat*>(
               &_SomeMessage_Mat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SomeMessage_Mat& a, SomeMessage_Mat& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage_Mat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage_Mat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SomeMessage_Mat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SomeMessage_Mat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SomeMessage_Mat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SomeMessage_Mat& from) {
    SomeMessage_Mat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage_Mat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage.Mat";
  }
  protected:
  explicit SomeMessage_Mat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 5,
    kRowsFieldNumber = 2,
    kColsFieldNumber = 3,
  };
  // repeated uint32 data = 5;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  uint32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_data() const;
  void _internal_add_data(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_data();
  public:
  uint32_t data(int index) const;
  void set_data(int index, uint32_t value);
  void add_data(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_data();

  // uint32 rows = 2;
  void clear_rows();
  uint32_t rows() const;
  void set_rows(uint32_t value);
  private:
  uint32_t _internal_rows() const;
  void _internal_set_rows(uint32_t value);
  public:

  // uint32 cols = 3;
  void clear_cols();
  uint32_t cols() const;
  void set_cols(uint32_t value);
  private:
  uint32_t _internal_cols() const;
  void _internal_set_cols(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SomeMessage.Mat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    uint32_t rows_;
    uint32_t cols_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test01_2eproto;
};
// -------------------------------------------------------------------

class SomeMessage_Box final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage.Box) */ {
 public:
  inline SomeMessage_Box() : SomeMessage_Box(nullptr) {}
  ~SomeMessage_Box() override;
  explicit PROTOBUF_CONSTEXPR SomeMessage_Box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SomeMessage_Box(const SomeMessage_Box& from);
  SomeMessage_Box(SomeMessage_Box&& from) noexcept
    : SomeMessage_Box() {
    *this = ::std::move(from);
  }

  inline SomeMessage_Box& operator=(const SomeMessage_Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage_Box& operator=(SomeMessage_Box&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SomeMessage_Box& default_instance() {
    return *internal_default_instance();
  }
  static inline const SomeMessage_Box* internal_default_instance() {
    return reinterpret_cast<const SomeMessage_Box*>(
               &_SomeMessage_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SomeMessage_Box& a, SomeMessage_Box& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage_Box* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage_Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SomeMessage_Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SomeMessage_Box>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SomeMessage_Box& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SomeMessage_Box& from) {
    SomeMessage_Box::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage_Box* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage.Box";
  }
  protected:
  explicit SomeMessage_Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatFieldNumber = 5,
    kBoxIDFieldNumber = 1,
    kFrameFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
  };
  // .SomeMessage.Mat mat = 5;
  bool has_mat() const;
  private:
  bool _internal_has_mat() const;
  public:
  void clear_mat();
  const ::SomeMessage_Mat& mat() const;
  PROTOBUF_NODISCARD ::SomeMessage_Mat* release_mat();
  ::SomeMessage_Mat* mutable_mat();
  void set_allocated_mat(::SomeMessage_Mat* mat);
  private:
  const ::SomeMessage_Mat& _internal_mat() const;
  ::SomeMessage_Mat* _internal_mutable_mat();
  public:
  void unsafe_arena_set_allocated_mat(
      ::SomeMessage_Mat* mat);
  ::SomeMessage_Mat* unsafe_arena_release_mat();

  // uint32 boxID = 1;
  void clear_boxid();
  uint32_t boxid() const;
  void set_boxid(uint32_t value);
  private:
  uint32_t _internal_boxid() const;
  void _internal_set_boxid(uint32_t value);
  public:

  // uint32 frame = 2;
  void clear_frame();
  uint32_t frame() const;
  void set_frame(uint32_t value);
  private:
  uint32_t _internal_frame() const;
  void _internal_set_frame(uint32_t value);
  public:

  // uint32 posX = 3;
  void clear_posx();
  uint32_t posx() const;
  void set_posx(uint32_t value);
  private:
  uint32_t _internal_posx() const;
  void _internal_set_posx(uint32_t value);
  public:

  // uint32 posY = 4;
  void clear_posy();
  uint32_t posy() const;
  void set_posy(uint32_t value);
  private:
  uint32_t _internal_posy() const;
  void _internal_set_posy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SomeMessage.Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SomeMessage_Mat* mat_;
    uint32_t boxid_;
    uint32_t frame_;
    uint32_t posx_;
    uint32_t posy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test01_2eproto;
};
// -------------------------------------------------------------------

class SomeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage) */ {
 public:
  inline SomeMessage() : SomeMessage(nullptr) {}
  ~SomeMessage() override;
  explicit PROTOBUF_CONSTEXPR SomeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SomeMessage(const SomeMessage& from);
  SomeMessage(SomeMessage&& from) noexcept
    : SomeMessage() {
    *this = ::std::move(from);
  }

  inline SomeMessage& operator=(const SomeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage& operator=(SomeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SomeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SomeMessage* internal_default_instance() {
    return reinterpret_cast<const SomeMessage*>(
               &_SomeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SomeMessage& a, SomeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SomeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SomeMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SomeMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SomeMessage& from) {
    SomeMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage";
  }
  protected:
  explicit SomeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SomeMessage_Mat Mat;
  typedef SomeMessage_Box Box;

  // accessors -------------------------------------------------------

  enum : int {
    kBoxFieldNumber = 1,
  };
  // .SomeMessage.Box box = 1;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::SomeMessage_Box& box() const;
  PROTOBUF_NODISCARD ::SomeMessage_Box* release_box();
  ::SomeMessage_Box* mutable_box();
  void set_allocated_box(::SomeMessage_Box* box);
  private:
  const ::SomeMessage_Box& _internal_box() const;
  ::SomeMessage_Box* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::SomeMessage_Box* box);
  ::SomeMessage_Box* unsafe_arena_release_box();

  // @@protoc_insertion_point(class_scope:SomeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::SomeMessage_Box* box_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test01_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SomeMessage_Mat

// uint32 rows = 2;
inline void SomeMessage_Mat::clear_rows() {
  _impl_.rows_ = 0u;
}
inline uint32_t SomeMessage_Mat::_internal_rows() const {
  return _impl_.rows_;
}
inline uint32_t SomeMessage_Mat::rows() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Mat.rows)
  return _internal_rows();
}
inline void SomeMessage_Mat::_internal_set_rows(uint32_t value) {
  
  _impl_.rows_ = value;
}
inline void SomeMessage_Mat::set_rows(uint32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Mat.rows)
}

// uint32 cols = 3;
inline void SomeMessage_Mat::clear_cols() {
  _impl_.cols_ = 0u;
}
inline uint32_t SomeMessage_Mat::_internal_cols() const {
  return _impl_.cols_;
}
inline uint32_t SomeMessage_Mat::cols() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Mat.cols)
  return _internal_cols();
}
inline void SomeMessage_Mat::_internal_set_cols(uint32_t value) {
  
  _impl_.cols_ = value;
}
inline void SomeMessage_Mat::set_cols(uint32_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Mat.cols)
}

// repeated uint32 data = 5;
inline int SomeMessage_Mat::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int SomeMessage_Mat::data_size() const {
  return _internal_data_size();
}
inline void SomeMessage_Mat::clear_data() {
  _impl_.data_.Clear();
}
inline uint32_t SomeMessage_Mat::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline uint32_t SomeMessage_Mat::data(int index) const {
  // @@protoc_insertion_point(field_get:SomeMessage.Mat.data)
  return _internal_data(index);
}
inline void SomeMessage_Mat::set_data(int index, uint32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:SomeMessage.Mat.data)
}
inline void SomeMessage_Mat::_internal_add_data(uint32_t value) {
  _impl_.data_.Add(value);
}
inline void SomeMessage_Mat::add_data(uint32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:SomeMessage.Mat.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SomeMessage_Mat::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SomeMessage_Mat::data() const {
  // @@protoc_insertion_point(field_list:SomeMessage.Mat.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SomeMessage_Mat::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SomeMessage_Mat::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:SomeMessage.Mat.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// SomeMessage_Box

// uint32 boxID = 1;
inline void SomeMessage_Box::clear_boxid() {
  _impl_.boxid_ = 0u;
}
inline uint32_t SomeMessage_Box::_internal_boxid() const {
  return _impl_.boxid_;
}
inline uint32_t SomeMessage_Box::boxid() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Box.boxID)
  return _internal_boxid();
}
inline void SomeMessage_Box::_internal_set_boxid(uint32_t value) {
  
  _impl_.boxid_ = value;
}
inline void SomeMessage_Box::set_boxid(uint32_t value) {
  _internal_set_boxid(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Box.boxID)
}

// uint32 frame = 2;
inline void SomeMessage_Box::clear_frame() {
  _impl_.frame_ = 0u;
}
inline uint32_t SomeMessage_Box::_internal_frame() const {
  return _impl_.frame_;
}
inline uint32_t SomeMessage_Box::frame() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Box.frame)
  return _internal_frame();
}
inline void SomeMessage_Box::_internal_set_frame(uint32_t value) {
  
  _impl_.frame_ = value;
}
inline void SomeMessage_Box::set_frame(uint32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Box.frame)
}

// uint32 posX = 3;
inline void SomeMessage_Box::clear_posx() {
  _impl_.posx_ = 0u;
}
inline uint32_t SomeMessage_Box::_internal_posx() const {
  return _impl_.posx_;
}
inline uint32_t SomeMessage_Box::posx() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Box.posX)
  return _internal_posx();
}
inline void SomeMessage_Box::_internal_set_posx(uint32_t value) {
  
  _impl_.posx_ = value;
}
inline void SomeMessage_Box::set_posx(uint32_t value) {
  _internal_set_posx(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Box.posX)
}

// uint32 posY = 4;
inline void SomeMessage_Box::clear_posy() {
  _impl_.posy_ = 0u;
}
inline uint32_t SomeMessage_Box::_internal_posy() const {
  return _impl_.posy_;
}
inline uint32_t SomeMessage_Box::posy() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Box.posY)
  return _internal_posy();
}
inline void SomeMessage_Box::_internal_set_posy(uint32_t value) {
  
  _impl_.posy_ = value;
}
inline void SomeMessage_Box::set_posy(uint32_t value) {
  _internal_set_posy(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Box.posY)
}

// .SomeMessage.Mat mat = 5;
inline bool SomeMessage_Box::_internal_has_mat() const {
  return this != internal_default_instance() && _impl_.mat_ != nullptr;
}
inline bool SomeMessage_Box::has_mat() const {
  return _internal_has_mat();
}
inline void SomeMessage_Box::clear_mat() {
  if (GetArenaForAllocation() == nullptr && _impl_.mat_ != nullptr) {
    delete _impl_.mat_;
  }
  _impl_.mat_ = nullptr;
}
inline const ::SomeMessage_Mat& SomeMessage_Box::_internal_mat() const {
  const ::SomeMessage_Mat* p = _impl_.mat_;
  return p != nullptr ? *p : reinterpret_cast<const ::SomeMessage_Mat&>(
      ::_SomeMessage_Mat_default_instance_);
}
inline const ::SomeMessage_Mat& SomeMessage_Box::mat() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Box.mat)
  return _internal_mat();
}
inline void SomeMessage_Box::unsafe_arena_set_allocated_mat(
    ::SomeMessage_Mat* mat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mat_);
  }
  _impl_.mat_ = mat;
  if (mat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Box.mat)
}
inline ::SomeMessage_Mat* SomeMessage_Box::release_mat() {
  
  ::SomeMessage_Mat* temp = _impl_.mat_;
  _impl_.mat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SomeMessage_Mat* SomeMessage_Box::unsafe_arena_release_mat() {
  // @@protoc_insertion_point(field_release:SomeMessage.Box.mat)
  
  ::SomeMessage_Mat* temp = _impl_.mat_;
  _impl_.mat_ = nullptr;
  return temp;
}
inline ::SomeMessage_Mat* SomeMessage_Box::_internal_mutable_mat() {
  
  if (_impl_.mat_ == nullptr) {
    auto* p = CreateMaybeMessage<::SomeMessage_Mat>(GetArenaForAllocation());
    _impl_.mat_ = p;
  }
  return _impl_.mat_;
}
inline ::SomeMessage_Mat* SomeMessage_Box::mutable_mat() {
  ::SomeMessage_Mat* _msg = _internal_mutable_mat();
  // @@protoc_insertion_point(field_mutable:SomeMessage.Box.mat)
  return _msg;
}
inline void SomeMessage_Box::set_allocated_mat(::SomeMessage_Mat* mat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mat_;
  }
  if (mat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mat);
    if (message_arena != submessage_arena) {
      mat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mat_ = mat;
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Box.mat)
}

// -------------------------------------------------------------------

// SomeMessage

// .SomeMessage.Box box = 1;
inline bool SomeMessage::_internal_has_box() const {
  return this != internal_default_instance() && _impl_.box_ != nullptr;
}
inline bool SomeMessage::has_box() const {
  return _internal_has_box();
}
inline void SomeMessage::clear_box() {
  if (GetArenaForAllocation() == nullptr && _impl_.box_ != nullptr) {
    delete _impl_.box_;
  }
  _impl_.box_ = nullptr;
}
inline const ::SomeMessage_Box& SomeMessage::_internal_box() const {
  const ::SomeMessage_Box* p = _impl_.box_;
  return p != nullptr ? *p : reinterpret_cast<const ::SomeMessage_Box&>(
      ::_SomeMessage_Box_default_instance_);
}
inline const ::SomeMessage_Box& SomeMessage::box() const {
  // @@protoc_insertion_point(field_get:SomeMessage.box)
  return _internal_box();
}
inline void SomeMessage::unsafe_arena_set_allocated_box(
    ::SomeMessage_Box* box) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.box_);
  }
  _impl_.box_ = box;
  if (box) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.box)
}
inline ::SomeMessage_Box* SomeMessage::release_box() {
  
  ::SomeMessage_Box* temp = _impl_.box_;
  _impl_.box_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SomeMessage_Box* SomeMessage::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_release:SomeMessage.box)
  
  ::SomeMessage_Box* temp = _impl_.box_;
  _impl_.box_ = nullptr;
  return temp;
}
inline ::SomeMessage_Box* SomeMessage::_internal_mutable_box() {
  
  if (_impl_.box_ == nullptr) {
    auto* p = CreateMaybeMessage<::SomeMessage_Box>(GetArenaForAllocation());
    _impl_.box_ = p;
  }
  return _impl_.box_;
}
inline ::SomeMessage_Box* SomeMessage::mutable_box() {
  ::SomeMessage_Box* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:SomeMessage.box)
  return _msg;
}
inline void SomeMessage::set_allocated_box(::SomeMessage_Box* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.box_;
  }
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.box_ = box;
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.box)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test01_2eproto
