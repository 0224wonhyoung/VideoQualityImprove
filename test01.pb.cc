// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test01.proto

#include "test01.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SomeMessage_Mat::SomeMessage_Mat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rows_)*/0u
  , /*decltype(_impl_.cols_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SomeMessage_MatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SomeMessage_MatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SomeMessage_MatDefaultTypeInternal() {}
  union {
    SomeMessage_Mat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SomeMessage_MatDefaultTypeInternal _SomeMessage_Mat_default_instance_;
PROTOBUF_CONSTEXPR SomeMessage_Box::SomeMessage_Box(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mat_)*/nullptr
  , /*decltype(_impl_.boxid_)*/0u
  , /*decltype(_impl_.frame_)*/0u
  , /*decltype(_impl_.posx_)*/0u
  , /*decltype(_impl_.posy_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SomeMessage_BoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SomeMessage_BoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SomeMessage_BoxDefaultTypeInternal() {}
  union {
    SomeMessage_Box _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SomeMessage_BoxDefaultTypeInternal _SomeMessage_Box_default_instance_;
PROTOBUF_CONSTEXPR SomeMessage::SomeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.box_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SomeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SomeMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SomeMessageDefaultTypeInternal() {}
  union {
    SomeMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SomeMessageDefaultTypeInternal _SomeMessage_default_instance_;
static ::_pb::Metadata file_level_metadata_test01_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_test01_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test01_2eproto = nullptr;

const uint32_t TableStruct_test01_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Mat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Mat, _impl_.rows_),
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Mat, _impl_.cols_),
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Mat, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Box, _impl_.boxid_),
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Box, _impl_.frame_),
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Box, _impl_.posx_),
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Box, _impl_.posy_),
  PROTOBUF_FIELD_OFFSET(::SomeMessage_Box, _impl_.mat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SomeMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SomeMessage, _impl_.box_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SomeMessage_Mat)},
  { 9, -1, -1, sizeof(::SomeMessage_Box)},
  { 20, -1, -1, sizeof(::SomeMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SomeMessage_Mat_default_instance_._instance,
  &::_SomeMessage_Box_default_instance_._instance,
  &::_SomeMessage_default_instance_._instance,
};

const char descriptor_table_protodef_test01_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014test01.proto\"\275\001\n\013SomeMessage\022\035\n\003box\030\001 "
  "\001(\0132\020.SomeMessage.Box\032/\n\003Mat\022\014\n\004rows\030\002 \001"
  "(\r\022\014\n\004cols\030\003 \001(\r\022\014\n\004data\030\005 \003(\r\032^\n\003Box\022\r\n"
  "\005boxID\030\001 \001(\r\022\r\n\005frame\030\002 \001(\r\022\014\n\004posX\030\003 \001("
  "\r\022\014\n\004posY\030\004 \001(\r\022\035\n\003mat\030\005 \001(\0132\020.SomeMessa"
  "ge.Matb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_test01_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test01_2eproto = {
    false, false, 214, descriptor_table_protodef_test01_2eproto,
    "test01.proto",
    &descriptor_table_test01_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_test01_2eproto::offsets,
    file_level_metadata_test01_2eproto, file_level_enum_descriptors_test01_2eproto,
    file_level_service_descriptors_test01_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test01_2eproto_getter() {
  return &descriptor_table_test01_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test01_2eproto(&descriptor_table_test01_2eproto);

// ===================================================================

class SomeMessage_Mat::_Internal {
 public:
};

SomeMessage_Mat::SomeMessage_Mat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SomeMessage.Mat)
}
SomeMessage_Mat::SomeMessage_Mat(const SomeMessage_Mat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SomeMessage_Mat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.rows_){}
    , decltype(_impl_.cols_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rows_, &from._impl_.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cols_) -
    reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  // @@protoc_insertion_point(copy_constructor:SomeMessage.Mat)
}

inline void SomeMessage_Mat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , decltype(_impl_.rows_){0u}
    , decltype(_impl_.cols_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SomeMessage_Mat::~SomeMessage_Mat() {
  // @@protoc_insertion_point(destructor:SomeMessage.Mat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SomeMessage_Mat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void SomeMessage_Mat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SomeMessage_Mat::Clear() {
// @@protoc_insertion_point(message_clear_start:SomeMessage.Mat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  ::memset(&_impl_.rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cols_) -
      reinterpret_cast<char*>(&_impl_.rows_)) + sizeof(_impl_.cols_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SomeMessage_Mat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cols = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SomeMessage_Mat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SomeMessage.Mat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rows = 2;
  if (this->_internal_rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rows(), target);
  }

  // uint32 cols = 3;
  if (this->_internal_cols() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cols(), target);
  }

  // repeated uint32 data = 5;
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SomeMessage.Mat)
  return target;
}

size_t SomeMessage_Mat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SomeMessage.Mat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 data = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 rows = 2;
  if (this->_internal_rows() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rows());
  }

  // uint32 cols = 3;
  if (this->_internal_cols() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cols());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SomeMessage_Mat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SomeMessage_Mat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SomeMessage_Mat::GetClassData() const { return &_class_data_; }


void SomeMessage_Mat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SomeMessage_Mat*>(&to_msg);
  auto& from = static_cast<const SomeMessage_Mat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SomeMessage.Mat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_rows() != 0) {
    _this->_internal_set_rows(from._internal_rows());
  }
  if (from._internal_cols() != 0) {
    _this->_internal_set_cols(from._internal_cols());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SomeMessage_Mat::CopyFrom(const SomeMessage_Mat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SomeMessage.Mat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeMessage_Mat::IsInitialized() const {
  return true;
}

void SomeMessage_Mat::InternalSwap(SomeMessage_Mat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SomeMessage_Mat, _impl_.cols_)
      + sizeof(SomeMessage_Mat::_impl_.cols_)
      - PROTOBUF_FIELD_OFFSET(SomeMessage_Mat, _impl_.rows_)>(
          reinterpret_cast<char*>(&_impl_.rows_),
          reinterpret_cast<char*>(&other->_impl_.rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SomeMessage_Mat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test01_2eproto_getter, &descriptor_table_test01_2eproto_once,
      file_level_metadata_test01_2eproto[0]);
}

// ===================================================================

class SomeMessage_Box::_Internal {
 public:
  static const ::SomeMessage_Mat& mat(const SomeMessage_Box* msg);
};

const ::SomeMessage_Mat&
SomeMessage_Box::_Internal::mat(const SomeMessage_Box* msg) {
  return *msg->_impl_.mat_;
}
SomeMessage_Box::SomeMessage_Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SomeMessage.Box)
}
SomeMessage_Box::SomeMessage_Box(const SomeMessage_Box& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SomeMessage_Box* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mat_){nullptr}
    , decltype(_impl_.boxid_){}
    , decltype(_impl_.frame_){}
    , decltype(_impl_.posx_){}
    , decltype(_impl_.posy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mat()) {
    _this->_impl_.mat_ = new ::SomeMessage_Mat(*from._impl_.mat_);
  }
  ::memcpy(&_impl_.boxid_, &from._impl_.boxid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.posy_) -
    reinterpret_cast<char*>(&_impl_.boxid_)) + sizeof(_impl_.posy_));
  // @@protoc_insertion_point(copy_constructor:SomeMessage.Box)
}

inline void SomeMessage_Box::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mat_){nullptr}
    , decltype(_impl_.boxid_){0u}
    , decltype(_impl_.frame_){0u}
    , decltype(_impl_.posx_){0u}
    , decltype(_impl_.posy_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SomeMessage_Box::~SomeMessage_Box() {
  // @@protoc_insertion_point(destructor:SomeMessage.Box)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SomeMessage_Box::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mat_;
}

void SomeMessage_Box::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SomeMessage_Box::Clear() {
// @@protoc_insertion_point(message_clear_start:SomeMessage.Box)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mat_ != nullptr) {
    delete _impl_.mat_;
  }
  _impl_.mat_ = nullptr;
  ::memset(&_impl_.boxid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.posy_) -
      reinterpret_cast<char*>(&_impl_.boxid_)) + sizeof(_impl_.posy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SomeMessage_Box::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 boxID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.boxid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.posx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 posY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.posy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .SomeMessage.Mat mat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SomeMessage_Box::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SomeMessage.Box)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 boxID = 1;
  if (this->_internal_boxid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_boxid(), target);
  }

  // uint32 frame = 2;
  if (this->_internal_frame() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frame(), target);
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_posx(), target);
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_posy(), target);
  }

  // .SomeMessage.Mat mat = 5;
  if (this->_internal_has_mat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mat(this),
        _Internal::mat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SomeMessage.Box)
  return target;
}

size_t SomeMessage_Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SomeMessage.Box)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SomeMessage.Mat mat = 5;
  if (this->_internal_has_mat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mat_);
  }

  // uint32 boxID = 1;
  if (this->_internal_boxid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_boxid());
  }

  // uint32 frame = 2;
  if (this->_internal_frame() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame());
  }

  // uint32 posX = 3;
  if (this->_internal_posx() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posx());
  }

  // uint32 posY = 4;
  if (this->_internal_posy() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_posy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SomeMessage_Box::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SomeMessage_Box::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SomeMessage_Box::GetClassData() const { return &_class_data_; }


void SomeMessage_Box::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SomeMessage_Box*>(&to_msg);
  auto& from = static_cast<const SomeMessage_Box&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SomeMessage.Box)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mat()) {
    _this->_internal_mutable_mat()->::SomeMessage_Mat::MergeFrom(
        from._internal_mat());
  }
  if (from._internal_boxid() != 0) {
    _this->_internal_set_boxid(from._internal_boxid());
  }
  if (from._internal_frame() != 0) {
    _this->_internal_set_frame(from._internal_frame());
  }
  if (from._internal_posx() != 0) {
    _this->_internal_set_posx(from._internal_posx());
  }
  if (from._internal_posy() != 0) {
    _this->_internal_set_posy(from._internal_posy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SomeMessage_Box::CopyFrom(const SomeMessage_Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SomeMessage.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeMessage_Box::IsInitialized() const {
  return true;
}

void SomeMessage_Box::InternalSwap(SomeMessage_Box* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SomeMessage_Box, _impl_.posy_)
      + sizeof(SomeMessage_Box::_impl_.posy_)
      - PROTOBUF_FIELD_OFFSET(SomeMessage_Box, _impl_.mat_)>(
          reinterpret_cast<char*>(&_impl_.mat_),
          reinterpret_cast<char*>(&other->_impl_.mat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SomeMessage_Box::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test01_2eproto_getter, &descriptor_table_test01_2eproto_once,
      file_level_metadata_test01_2eproto[1]);
}

// ===================================================================

class SomeMessage::_Internal {
 public:
  static const ::SomeMessage_Box& box(const SomeMessage* msg);
};

const ::SomeMessage_Box&
SomeMessage::_Internal::box(const SomeMessage* msg) {
  return *msg->_impl_.box_;
}
SomeMessage::SomeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SomeMessage)
}
SomeMessage::SomeMessage(const SomeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SomeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.box_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_box()) {
    _this->_impl_.box_ = new ::SomeMessage_Box(*from._impl_.box_);
  }
  // @@protoc_insertion_point(copy_constructor:SomeMessage)
}

inline void SomeMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.box_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SomeMessage::~SomeMessage() {
  // @@protoc_insertion_point(destructor:SomeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SomeMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.box_;
}

void SomeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SomeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SomeMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.box_ != nullptr) {
    delete _impl_.box_;
  }
  _impl_.box_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SomeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .SomeMessage.Box box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SomeMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SomeMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .SomeMessage.Box box = 1;
  if (this->_internal_has_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::box(this),
        _Internal::box(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SomeMessage)
  return target;
}

size_t SomeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SomeMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .SomeMessage.Box box = 1;
  if (this->_internal_has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.box_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SomeMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SomeMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SomeMessage::GetClassData() const { return &_class_data_; }


void SomeMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SomeMessage*>(&to_msg);
  auto& from = static_cast<const SomeMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SomeMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_box()) {
    _this->_internal_mutable_box()->::SomeMessage_Box::MergeFrom(
        from._internal_box());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SomeMessage::CopyFrom(const SomeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SomeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SomeMessage::IsInitialized() const {
  return true;
}

void SomeMessage::InternalSwap(SomeMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.box_, other->_impl_.box_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SomeMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test01_2eproto_getter, &descriptor_table_test01_2eproto_once,
      file_level_metadata_test01_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SomeMessage_Mat*
Arena::CreateMaybeMessage< ::SomeMessage_Mat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SomeMessage_Mat >(arena);
}
template<> PROTOBUF_NOINLINE ::SomeMessage_Box*
Arena::CreateMaybeMessage< ::SomeMessage_Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SomeMessage_Box >(arena);
}
template<> PROTOBUF_NOINLINE ::SomeMessage*
Arena::CreateMaybeMessage< ::SomeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SomeMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
